@page "/Manager/EditPizza/{pizzaId}"

@using Repository.Repositories;
@using Models;
@using DataBaseAccess.Models;
@using System;

@inject Repository.Services.PizzaService pizzaService
@inject NavigationManager navigationManager

<center>
<h4>@header</h4>
        <div class="box-shadow">
            <EditForm Model="@newPizza" OnValidSubmit="@editPizza">
                <DataAnnotationsValidator/>
                    <div>Price:         <InputNumber id="price" @bind-Value="newPizza.price"/>
                        <div style="color:rgb(255,51,51)"><ValidationMessage For="() => newPizza.price"/></div>
                    </div>
                    <br />
                    <div>Cost:          <InputNumber id="cost" @bind-Value="newPizza.cost"/>
                        <div style="color:rgb(255,51,51)"><ValidationMessage For="() => newPizza.cost"/></div>
                    </div>
                    <br />
                    <div>Availability:  <InputCheckbox id="availability" @bind-Value="newPizza.isAvailable"/>
                        <div style="color:rgb(255,51,51)"><ValidationMessage For="() => newPizza.isAvailable"/></div>    
                    </div>
                    <br />
                    <div>Type:          <InputText id="type" @bind-Value="newPizza.type"/>
                        <div style="color:rgb(255,51,51)"><ValidationMessage For="() => newPizza.type"/></div>
                    </div>
                    <br />
                    <div>Size:          <InputNumber id="size" @bind-Value="newPizza.size"/>
                        <div style="color:rgb(255,51,51)"><ValidationMessage For="() => newPizza.size"/></div>
                    </div>
                    <br />
                    <div>Points:        <InputNumber id="points" @bind-Value="newPizza.points"/>
                        <div style="color:rgb(255,51,51)"><ValidationMessage For="() => newPizza.points"/></div>
                    </div>
                <button type="submit" class="btn btn-primary ml-2 mt-2">@buttonText</button>
            </EditForm>
        </div>
    <br />
        <button type="button" class="btn btn-primary" @onclick="returnFromEditing">Return</button>
</center>

@code 
{
    [Parameter]
    public string pizzaId { get; set; }
    private List<Pizza> menu;
    private PizzaFront newPizza = new PizzaFront();
    private Pizza dbPizza;
    private string header;
    private string buttonText;

    private DataBaseAccess.Models.Pizza pizza;

    protected override async Task OnParametersSetAsync()
    {
        if (Int32.Parse(pizzaId) > 0)
        {
            dbPizza = await pizzaService.GetPizzaById(Int32.Parse(pizzaId));
            newPizza.cost = dbPizza.Cost;
            newPizza.price = dbPizza.Price;
            newPizza.isAvailable = dbPizza.IsAvailable;
            newPizza.points = dbPizza.Points.GetValueOrDefault();
            newPizza.size = dbPizza.Size.GetValueOrDefault();
            newPizza.type = dbPizza.Type;
            header = "Update pizza";
            buttonText = "Update";

        }
        else
        {
            header = "Insert pizza";
            buttonText = "Insert";
        }
    }

    private void editPizza()
    {
        Pizza tmp = new Pizza()
        {
            IdPizza = Int32.Parse(pizzaId),
            Price = newPizza.price,
            Cost = newPizza.cost,
            IsAvailable = newPizza.isAvailable,
            Type = newPizza.type,
            Size = newPizza.size,
            Points = newPizza.points
        };

        if (Int32.Parse(pizzaId) > 0)
            pizzaService.UpdatePizza(tmp);
        else
        {
            pizzaService.AddNewPizza(newPizza.price, newPizza.cost, newPizza.isAvailable, newPizza.type, newPizza.size, newPizza.points);
            newPizza = new PizzaFront();
        }
    }

    private void returnFromEditing()
    {
        navigationManager.NavigateTo("/Manager/ManageMenu");
    }
}